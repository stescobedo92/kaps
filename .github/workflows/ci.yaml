name: Rust CI/CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  pull_request:

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-C target-cpu=native"

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable]

    steps:
      - uses: actions/checkout@v4

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          targets: ${{ matrix.target }}

      - name: Run Tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -- --test-threads=1

  build:
    name: Build (${{ matrix.os }})
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: ""
            archive: tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            ext: ""
            archive: zip
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: ".exe"
            archive: zip

    steps:
      - uses: actions/checkout@v4

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          targets: ${{ matrix.target }}

      - name: Build Release
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package Binary
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/kaps${{ matrix.ext }} dist/kaps-${{ matrix.target }}${{ matrix.ext }}
          
          case ${{ matrix.archive }} in
            "tar.gz")
              tar -czvf dist/kaps-${{ matrix.target }}.tar.gz -C dist kaps-${{ matrix.target }}${{ matrix.ext }}
              ;;
            "zip")
              zip -j dist/kaps-${{ matrix.target }}.zip dist/kaps-${{ matrix.target }}${{ matrix.ext }}
              ;;
          esac

      - name: Generate Checksum
        run: |
          cd dist
          shasum -a 256 kaps-${{ matrix.target }}.* > sha256sums.txt

      - uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ matrix.os }}
          path: dist/*
          retention-days: 1

  release:
    name: Create Release
    needs: [test, build]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/download-artifact@v3
        with:
          path: artifacts
          pattern: binaries-*

      - name: Prepare Assets
        run: |
          mkdir -p release_assets
          find artifacts -type f \( -name "*.zip" -o -name "*.tar.gz" -o -name "*.txt" \) -exec cp {} release_assets/ \;

      - name: Get Version
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          body: |
            ## Changelog
            
            - Version: ${{ steps.get_version.outputs.version }}
            - Commit: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            - Build date: $(date -u +'%Y-%m-%dT%H:%M:%SZ')
            
            ### Checksums
            ```sha256sum
            $(cat release_assets/sha256sums.txt)
            ```
          files: |
            release_assets/*
          draft: false
          prerelease: false
          generate_release_notes: true